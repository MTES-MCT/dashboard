{"totalCount":6,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/mobilic-api","grade":"D","alerts":[{"number":17,"created_at":"2024-01-02T13:12:27Z","updated_at":"2024-01-02T13:12:29Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/17","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/17","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"python:S5659","severity":"warning","description":"JWT should be signed and verified","name":"python:S5659","tags":["cwe","privacy"],"full_description":"JWT should be signed and verified","help":"<p>This vulnerability allows forging of JSON Web Tokens to impersonate other users.</p>\n<h2>Why is this an issue?</h2>\n<p>JSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.</p>\n<h3>What is the potential impact?</h3>\n<p>When a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.</p>\n<h4>Impersonation of users</h4>\n<p>JWTs are commonly used to represent user authorization claims. They contain information about the user’s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.</p>\n<h4>Unauthorized data access</h4>\n<p>When a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.</p>\n<h2>How to fix it in PyJWT</h2>\n<h3>Code examples</h3>\n<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport jwt\n\njwt.decode(token, options={\"verify_signature\":False}) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>By default, verification is enabled for the method <code>decode</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport jwt\n\njwt.decode(token, key, algorithms=\"HS256\")\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/347\">CWE-347 - Improper Verification of Cryptographic Signature</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"01adc4b47a67d6d95144b5deee999ea8abf0c45d","message":{"text":"<!--SONAR_ISSUE_KEY:AYyMCM-NLDc9JXTddumE-->Don't use a JWT token without verifying its signature. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AYyMCM-NLDc9JXTddumE&open=AYyMCM-NLDc9JXTddumE\">SonarCloud</a></p>"},"location":{"path":"app/helpers/france_connect.py","start_line":50,"end_line":50,"start_column":49,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/17/instances"},{"number":16,"created_at":"2023-12-21T11:00:39Z","updated_at":"2023-12-21T11:00:41Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/16","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/16","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"python:S6786","severity":"warning","description":"GraphQL introspection should be disabled in production","name":"python:S6786","tags":["cwe"],"full_description":"GraphQL introspection should be disabled in production","help":"<p>This vulnerability exposes information about all the APIs available on a GraphQL API server. This information can be used to discover weaknesses in\nthe API that can be exploited.</p>\n<h2>Why is this an issue?</h2>\n<p>GraphQL introspection is a feature that allows client applications to query the schema of a GraphQL API at runtime. It provides a way for\ndevelopers to explore and understand the available data and operations supported by the API.</p>\n<p>This feature is a diagnostic tool that should only be used in the development phase as its presence also creates risks.</p>\n<p>Clear documentation and API references should be considered better discoverability tools for a public GraphQL API.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker can use introspection to identify all of the operations and data types supported by the server. This information can then be used to\nidentify potential targets for attacks.</p>\n<h4>Exploitation of private APIs</h4>\n<p>Even when a GraphQL API server is open to access by third-party applications, it may contain APIs that are intended only for private use.\nIntrospection allows these private APIs to be discovered.</p>\n<p>Private APIs often do not receive the same level of security rigor as public APIs. For example, they may skip input validation because the API is\nonly expected to be called from trusted applications. This can create avenues for attack that are not present on public APIs.</p>\n<h4>Exposure of sensitive data</h4>\n<p>GraphQL allows for multiple related objects to be retrieved using a single API call. This provides an efficient method of obtaining data for use in\na client application.</p>\n<p>An attacker may be able to use these relationships between objects to traverse the data structure. They may be able to find a link to sensitive\ndata that the developer did not intentionally make available.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>Make sure that introspection is disabled in production environments. You can use the following code sample as a reference, in conjunction with your\nown methods for distinguishing between production and non-production environments.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\n\n# Only one of the following needs to be used\nfrom graphql.validation import NoSchemaIntrospectionCustomRule # graphql-core v3\nfrom graphene.validation import DisableIntrospection           # graphene v3\n\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n            NoSchemaIntrospectionCustomRule,\n            DisableIntrospection,\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disabling introspection</h4>\n<p>The GraphQL server framework should be instructed to disable introspection in production environments. This prevents any attacker attempt to\nretrieve schema information from the server at runtime.</p>\n<p>Each GraphQL framework will have a different method of doing this, possibly including:</p>\n<ul>\n  <li> Changing a simple boolean setting. </li>\n  <li> Adding a middleware module to the request processing chain. </li>\n  <li> Adding a GraphQL validator that rejects introspection keywords. </li>\n</ul>\n<p>If introspection is required, it should only be made available to the smallest possible audience. This could include development environments,\nusers with a specific right, or requests from a specific set of IP addresses.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP Web Security Testing Guide - <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#introspection-queries\">Testing GraphQL</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"01adc4b47a67d6d95144b5deee999ea8abf0c45d","message":{"text":"<!--SONAR_ISSUE_KEY:AYxnwlzEzDN-BIKbuQ8s-->Disable introspection on this \"GraphQL\" server endpoint. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AYxnwlzEzDN-BIKbuQ8s&open=AYxnwlzEzDN-BIKbuQ8s\">SonarCloud</a></p>"},"location":{"path":"app/__init__.py","start_line":105,"end_line":105,"start_column":15,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/16/instances"},{"number":15,"created_at":"2023-12-21T11:00:39Z","updated_at":"2023-12-21T11:00:41Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/15","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/15","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"python:S6786","severity":"warning","description":"GraphQL introspection should be disabled in production","name":"python:S6786","tags":["cwe"],"full_description":"GraphQL introspection should be disabled in production","help":"<p>This vulnerability exposes information about all the APIs available on a GraphQL API server. This information can be used to discover weaknesses in\nthe API that can be exploited.</p>\n<h2>Why is this an issue?</h2>\n<p>GraphQL introspection is a feature that allows client applications to query the schema of a GraphQL API at runtime. It provides a way for\ndevelopers to explore and understand the available data and operations supported by the API.</p>\n<p>This feature is a diagnostic tool that should only be used in the development phase as its presence also creates risks.</p>\n<p>Clear documentation and API references should be considered better discoverability tools for a public GraphQL API.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker can use introspection to identify all of the operations and data types supported by the server. This information can then be used to\nidentify potential targets for attacks.</p>\n<h4>Exploitation of private APIs</h4>\n<p>Even when a GraphQL API server is open to access by third-party applications, it may contain APIs that are intended only for private use.\nIntrospection allows these private APIs to be discovered.</p>\n<p>Private APIs often do not receive the same level of security rigor as public APIs. For example, they may skip input validation because the API is\nonly expected to be called from trusted applications. This can create avenues for attack that are not present on public APIs.</p>\n<h4>Exposure of sensitive data</h4>\n<p>GraphQL allows for multiple related objects to be retrieved using a single API call. This provides an efficient method of obtaining data for use in\na client application.</p>\n<p>An attacker may be able to use these relationships between objects to traverse the data structure. They may be able to find a link to sensitive\ndata that the developer did not intentionally make available.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>Make sure that introspection is disabled in production environments. You can use the following code sample as a reference, in conjunction with your\nown methods for distinguishing between production and non-production environments.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\n\n# Only one of the following needs to be used\nfrom graphql.validation import NoSchemaIntrospectionCustomRule # graphql-core v3\nfrom graphene.validation import DisableIntrospection           # graphene v3\n\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n            NoSchemaIntrospectionCustomRule,\n            DisableIntrospection,\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disabling introspection</h4>\n<p>The GraphQL server framework should be instructed to disable introspection in production environments. This prevents any attacker attempt to\nretrieve schema information from the server at runtime.</p>\n<p>Each GraphQL framework will have a different method of doing this, possibly including:</p>\n<ul>\n  <li> Changing a simple boolean setting. </li>\n  <li> Adding a middleware module to the request processing chain. </li>\n  <li> Adding a GraphQL validator that rejects introspection keywords. </li>\n</ul>\n<p>If introspection is required, it should only be made available to the smallest possible audience. This could include development environments,\nusers with a specific right, or requests from a specific set of IP addresses.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP Web Security Testing Guide - <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#introspection-queries\">Testing GraphQL</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"01adc4b47a67d6d95144b5deee999ea8abf0c45d","message":{"text":"<!--SONAR_ISSUE_KEY:AYxnwlzEzDN-BIKbuQ8r-->Disable introspection on this \"GraphQL\" server endpoint. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AYxnwlzEzDN-BIKbuQ8r&open=AYxnwlzEzDN-BIKbuQ8r\">SonarCloud</a></p>"},"location":{"path":"app/__init__.py","start_line":98,"end_line":98,"start_column":15,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/15/instances"},{"number":14,"created_at":"2023-12-21T11:00:39Z","updated_at":"2023-12-21T11:00:41Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/14","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/14","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"python:S6786","severity":"warning","description":"GraphQL introspection should be disabled in production","name":"python:S6786","tags":["cwe"],"full_description":"GraphQL introspection should be disabled in production","help":"<p>This vulnerability exposes information about all the APIs available on a GraphQL API server. This information can be used to discover weaknesses in\nthe API that can be exploited.</p>\n<h2>Why is this an issue?</h2>\n<p>GraphQL introspection is a feature that allows client applications to query the schema of a GraphQL API at runtime. It provides a way for\ndevelopers to explore and understand the available data and operations supported by the API.</p>\n<p>This feature is a diagnostic tool that should only be used in the development phase as its presence also creates risks.</p>\n<p>Clear documentation and API references should be considered better discoverability tools for a public GraphQL API.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker can use introspection to identify all of the operations and data types supported by the server. This information can then be used to\nidentify potential targets for attacks.</p>\n<h4>Exploitation of private APIs</h4>\n<p>Even when a GraphQL API server is open to access by third-party applications, it may contain APIs that are intended only for private use.\nIntrospection allows these private APIs to be discovered.</p>\n<p>Private APIs often do not receive the same level of security rigor as public APIs. For example, they may skip input validation because the API is\nonly expected to be called from trusted applications. This can create avenues for attack that are not present on public APIs.</p>\n<h4>Exposure of sensitive data</h4>\n<p>GraphQL allows for multiple related objects to be retrieved using a single API call. This provides an efficient method of obtaining data for use in\na client application.</p>\n<p>An attacker may be able to use these relationships between objects to traverse the data structure. They may be able to find a link to sensitive\ndata that the developer did not intentionally make available.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>Make sure that introspection is disabled in production environments. You can use the following code sample as a reference, in conjunction with your\nown methods for distinguishing between production and non-production environments.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\n\n# Only one of the following needs to be used\nfrom graphql.validation import NoSchemaIntrospectionCustomRule # graphql-core v3\nfrom graphene.validation import DisableIntrospection           # graphene v3\n\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n            NoSchemaIntrospectionCustomRule,\n            DisableIntrospection,\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disabling introspection</h4>\n<p>The GraphQL server framework should be instructed to disable introspection in production environments. This prevents any attacker attempt to\nretrieve schema information from the server at runtime.</p>\n<p>Each GraphQL framework will have a different method of doing this, possibly including:</p>\n<ul>\n  <li> Changing a simple boolean setting. </li>\n  <li> Adding a middleware module to the request processing chain. </li>\n  <li> Adding a GraphQL validator that rejects introspection keywords. </li>\n</ul>\n<p>If introspection is required, it should only be made available to the smallest possible audience. This could include development environments,\nusers with a specific right, or requests from a specific set of IP addresses.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP Web Security Testing Guide - <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#introspection-queries\">Testing GraphQL</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"01adc4b47a67d6d95144b5deee999ea8abf0c45d","message":{"text":"<!--SONAR_ISSUE_KEY:AYxnwlzEzDN-BIKbuQ8q-->Disable introspection on this \"GraphQL\" server endpoint. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AYxnwlzEzDN-BIKbuQ8q&open=AYxnwlzEzDN-BIKbuQ8q\">SonarCloud</a></p>"},"location":{"path":"app/__init__.py","start_line":112,"end_line":112,"start_column":15,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/14/instances"},{"number":13,"created_at":"2023-08-24T14:20:51Z","updated_at":"2023-08-24T14:20:51Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/13","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/13","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"secrets:S6698","severity":"warning","description":"PostgreSQL database passwords should not be disclosed","name":"secrets:S6698","tags":["cwe"],"full_description":"PostgreSQL database passwords should not be disclosed","help":"<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people’s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>Passwords in PostgreSQL are used to authenticate users against the database engine. They are associated with user accounts that are granted\nspecific permissions over the database and its hosted data.</p>\n<p>If a PostgreSQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored\nwithin it, and the applications that rely on it.</p>\n<h4>Compromise of sensitive data</h4>\n<p>If the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.</p>\n<p>In most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.</p>\n<h4>Security downgrade</h4>\n<p>Applications relying on a PostgreSQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on\nthe purposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.</p>\n<p>For example, if the PostgreSQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p>By default, no connection information is logged by PostgreSQL server. The <code>log_connections</code> parameter must be set to <code>true</code>\nin the server configuration for this to happen.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<p><strong>Never hard-code secrets, not even the default values</strong></p>\n<p>It is important that you do not hard-code secrets, even default values.</p>\n<p>First, hard-coded default secrets are often short and can be easily compromised even by attackers who do not have access to the code base.</p>\n<p>Second, hard-coded default secrets can cause problems if they need to be changed or replaced.</p>\n<p>And most importantly, there is always the possibility to accidentally set default secrets for production services, which can lead to security\nvulnerabilities and make production insecure by default.</p>\n<p>To minimize these risks, it is recommended to apply the above strategies, even for the default settings.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nuri = \"postgres://foouser:foopass@example.com/testdb\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport os\n\nuser = os.environ[\"PG_USER\"]\npassword = os.environ[\"PG_PASSWORD\"]\nuri = f\"postgres://{user}:{password}@example.com/testdb\"\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/15/client-authentication.html\">Client Authentication</a> </li>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/current/runtime-config-logging.html\">Error Reporting and Logging</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"01adc4b47a67d6d95144b5deee999ea8abf0c45d","message":{"text":"<!--SONAR_ISSUE_KEY:AYon60wrEE7vREjk4-rG-->Make sure this PostgreSQL database password gets changed and removed from the code. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AYon60wrEE7vREjk4-rG&open=AYon60wrEE7vREjk4-rG\">SonarCloud</a></p>"},"location":{"path":"config.py","start_line":137,"end_line":137,"start_column":36,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/13/instances"},{"number":12,"created_at":"2023-08-24T14:20:51Z","updated_at":"2023-08-24T14:20:51Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/12","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/12","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"secrets:S6698","severity":"warning","description":"PostgreSQL database passwords should not be disclosed","name":"secrets:S6698","tags":["cwe"],"full_description":"PostgreSQL database passwords should not be disclosed","help":"<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people’s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>Passwords in PostgreSQL are used to authenticate users against the database engine. They are associated with user accounts that are granted\nspecific permissions over the database and its hosted data.</p>\n<p>If a PostgreSQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored\nwithin it, and the applications that rely on it.</p>\n<h4>Compromise of sensitive data</h4>\n<p>If the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.</p>\n<p>In most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.</p>\n<h4>Security downgrade</h4>\n<p>Applications relying on a PostgreSQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on\nthe purposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.</p>\n<p>For example, if the PostgreSQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p>By default, no connection information is logged by PostgreSQL server. The <code>log_connections</code> parameter must be set to <code>true</code>\nin the server configuration for this to happen.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<p><strong>Never hard-code secrets, not even the default values</strong></p>\n<p>It is important that you do not hard-code secrets, even default values.</p>\n<p>First, hard-coded default secrets are often short and can be easily compromised even by attackers who do not have access to the code base.</p>\n<p>Second, hard-coded default secrets can cause problems if they need to be changed or replaced.</p>\n<p>And most importantly, there is always the possibility to accidentally set default secrets for production services, which can lead to security\nvulnerabilities and make production insecure by default.</p>\n<p>To minimize these risks, it is recommended to apply the above strategies, even for the default settings.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nuri = \"postgres://foouser:foopass@example.com/testdb\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport os\n\nuser = os.environ[\"PG_USER\"]\npassword = os.environ[\"PG_PASSWORD\"]\nuri = f\"postgres://{user}:{password}@example.com/testdb\"\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/15/client-authentication.html\">Client Authentication</a> </li>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/current/runtime-config-logging.html\">Error Reporting and Logging</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"01adc4b47a67d6d95144b5deee999ea8abf0c45d","message":{"text":"<!--SONAR_ISSUE_KEY:AYon60wqEE7vREjk4-rF-->Make sure this PostgreSQL database password gets changed and removed from the code. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AYon60wqEE7vREjk4-rF&open=AYon60wqEE7vREjk4-rF\">SonarCloud</a></p>"},"location":{"path":"config.py","start_line":19,"end_line":19,"start_column":47,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/12/instances"}]},{"url":"https://github.com/MTES-MCT/mobilic","grade":"A","alerts":[]}]}