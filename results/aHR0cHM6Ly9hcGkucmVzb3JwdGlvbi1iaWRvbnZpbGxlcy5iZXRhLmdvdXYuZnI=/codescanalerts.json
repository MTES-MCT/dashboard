{"totalCount":20,"grade":"F","repositories":[{"url":"https://github.com/MTES-MCT/resorption-bidonvilles","grade":"F","alerts":[{"number":134,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/134","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/134","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7018","severity":"warning","description":"Arguments in long RUN instructions should be sorted","name":"docker:S7018","tags":[],"full_description":"Arguments in long RUN instructions should be sorted","help":"<p>In Dockerfiles, when commands within a <code>RUN</code> instruction have a lot of arguments, especially those that install system packages, it is\nimportant to ensure that the arguments are sorted alphabetically (if the order is not enforced by a command). This practice enhances the readability\nand maintainability of the code. It allows for easier tracking of modifications and can help prevent potential errors.</p>\n<h2>Why is this an issue?</h2>\n<p>When arguments in <code>RUN</code> instructions are not sorted alphabetically, it can make the Dockerfile harder to read and maintain. However,\nwhen arguments are sorted, it is easier to track changes in version control systems and to locate specific arguments. This applies first and foremost\nto package managers, where a list of installed packages can grow over time.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    unzip \\\n    wget \\\n    curl \\\n    git \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nFROM alpine:3.12\n\nRUN apk add unzip wget curl git zip\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    git \\\n    unzip \\\n    wget \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nFROM alpine:3.12\n\nRUN apk add curl git unzip wget zip\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#sort-multi-line-arguments\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjY6HQpp6XieWuC-->Sort these package names alphanumerically. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjY6HQpp6XieWuC&open=AZEyVgjY6HQpp6XieWuC\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.api","start_line":9,"end_line":9,"start_column":19,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/134/instances"},{"number":133,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/133","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/133","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7018","severity":"warning","description":"Arguments in long RUN instructions should be sorted","name":"docker:S7018","tags":[],"full_description":"Arguments in long RUN instructions should be sorted","help":"<p>In Dockerfiles, when commands within a <code>RUN</code> instruction have a lot of arguments, especially those that install system packages, it is\nimportant to ensure that the arguments are sorted alphabetically (if the order is not enforced by a command). This practice enhances the readability\nand maintainability of the code. It allows for easier tracking of modifications and can help prevent potential errors.</p>\n<h2>Why is this an issue?</h2>\n<p>When arguments in <code>RUN</code> instructions are not sorted alphabetically, it can make the Dockerfile harder to read and maintain. However,\nwhen arguments are sorted, it is easier to track changes in version control systems and to locate specific arguments. This applies first and foremost\nto package managers, where a list of installed packages can grow over time.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    unzip \\\n    wget \\\n    curl \\\n    git \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nFROM alpine:3.12\n\nRUN apk add unzip wget curl git zip\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    git \\\n    unzip \\\n    wget \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nFROM alpine:3.12\n\nRUN apk add curl git unzip wget zip\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#sort-multi-line-arguments\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjr6HQpp6XieWuG-->Sort these package names alphanumerically. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjr6HQpp6XieWuG&open=AZEyVgjr6HQpp6XieWuG\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.www","start_line":9,"end_line":9,"start_column":19,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/133/instances"},{"number":132,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/132","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/132","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7018","severity":"warning","description":"Arguments in long RUN instructions should be sorted","name":"docker:S7018","tags":[],"full_description":"Arguments in long RUN instructions should be sorted","help":"<p>In Dockerfiles, when commands within a <code>RUN</code> instruction have a lot of arguments, especially those that install system packages, it is\nimportant to ensure that the arguments are sorted alphabetically (if the order is not enforced by a command). This practice enhances the readability\nand maintainability of the code. It allows for easier tracking of modifications and can help prevent potential errors.</p>\n<h2>Why is this an issue?</h2>\n<p>When arguments in <code>RUN</code> instructions are not sorted alphabetically, it can make the Dockerfile harder to read and maintain. However,\nwhen arguments are sorted, it is easier to track changes in version control systems and to locate specific arguments. This applies first and foremost\nto package managers, where a list of installed packages can grow over time.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    unzip \\\n    wget \\\n    curl \\\n    git \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nFROM alpine:3.12\n\nRUN apk add unzip wget curl git zip\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    git \\\n    unzip \\\n    wget \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nFROM alpine:3.12\n\nRUN apk add curl git unzip wget zip\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#sort-multi-line-arguments\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjB6HQpp6XieWt9-->Sort these package names alphanumerically. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjB6HQpp6XieWt9&open=AZEyVgjB6HQpp6XieWt9\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.webapp","start_line":9,"end_line":9,"start_column":19,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/132/instances"},{"number":131,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/131","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/131","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7029","severity":"warning","description":"Prefer COPY over ADD for copying local resources","name":"docker:S7029","tags":[],"full_description":"Prefer COPY over ADD for copying local resources","help":"<p>In Dockerfiles, it is recommended to use the COPY instruction over the ADD instruction for copying local resources. The COPY instruction is more\nstraightforward and less prone to errors, making it a better choice for copying local files and directories into a Docker image.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the ADD instruction instead of COPY for local resources in Dockerfiles can lead to several issues, including unexpected behavior, increased\ncomplexity, and security risks. The ADD instruction has additional features that can introduce unintended side effects, such as automatically\nextracting compressed files and fetching remote resources. This can make the behavior of the instruction less predictable and harder to understand or\neven lead to security issues, if, for example, due to a typo in the source path, the ADD instruction could fetch a remote resource instead of copying\na local file.</p>\n<p>If you only need to copy local files or directories into your Docker image, it is recommended to use the COPY instruction instead. Only use the ADD\ninstruction when you need its additional features, such as fetching remote resources or extracting compressed files. See also the rule\n{rule:docker:S7026} for more information on using the ADD instruction to fetch remote resources.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\nADD ./app /app\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\nCOPY ./app /app\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> {rule:docker:S7026} - Use ADD instruction to retrieve remote resources </li>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#add-or-copy\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjY6HQpp6XieWuE-->Replace this ADD instruction with a COPY instruction. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjY6HQpp6XieWuE&open=AZEyVgjY6HQpp6XieWuE\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.api","start_line":26,"end_line":26,"start_column":1,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/131/instances"},{"number":130,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/130","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/130","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7029","severity":"warning","description":"Prefer COPY over ADD for copying local resources","name":"docker:S7029","tags":[],"full_description":"Prefer COPY over ADD for copying local resources","help":"<p>In Dockerfiles, it is recommended to use the COPY instruction over the ADD instruction for copying local resources. The COPY instruction is more\nstraightforward and less prone to errors, making it a better choice for copying local files and directories into a Docker image.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the ADD instruction instead of COPY for local resources in Dockerfiles can lead to several issues, including unexpected behavior, increased\ncomplexity, and security risks. The ADD instruction has additional features that can introduce unintended side effects, such as automatically\nextracting compressed files and fetching remote resources. This can make the behavior of the instruction less predictable and harder to understand or\neven lead to security issues, if, for example, due to a typo in the source path, the ADD instruction could fetch a remote resource instead of copying\na local file.</p>\n<p>If you only need to copy local files or directories into your Docker image, it is recommended to use the COPY instruction instead. Only use the ADD\ninstruction when you need its additional features, such as fetching remote resources or extracting compressed files. See also the rule\n{rule:docker:S7026} for more information on using the ADD instruction to fetch remote resources.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\nADD ./app /app\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\nCOPY ./app /app\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> {rule:docker:S7026} - Use ADD instruction to retrieve remote resources </li>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#add-or-copy\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjY6HQpp6XieWuD-->Replace this ADD instruction with a COPY instruction. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjY6HQpp6XieWuD&open=AZEyVgjY6HQpp6XieWuD\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.api","start_line":25,"end_line":25,"start_column":1,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/130/instances"},{"number":129,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/129","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/129","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7029","severity":"warning","description":"Prefer COPY over ADD for copying local resources","name":"docker:S7029","tags":[],"full_description":"Prefer COPY over ADD for copying local resources","help":"<p>In Dockerfiles, it is recommended to use the COPY instruction over the ADD instruction for copying local resources. The COPY instruction is more\nstraightforward and less prone to errors, making it a better choice for copying local files and directories into a Docker image.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the ADD instruction instead of COPY for local resources in Dockerfiles can lead to several issues, including unexpected behavior, increased\ncomplexity, and security risks. The ADD instruction has additional features that can introduce unintended side effects, such as automatically\nextracting compressed files and fetching remote resources. This can make the behavior of the instruction less predictable and harder to understand or\neven lead to security issues, if, for example, due to a typo in the source path, the ADD instruction could fetch a remote resource instead of copying\na local file.</p>\n<p>If you only need to copy local files or directories into your Docker image, it is recommended to use the COPY instruction instead. Only use the ADD\ninstruction when you need its additional features, such as fetching remote resources or extracting compressed files. See also the rule\n{rule:docker:S7026} for more information on using the ADD instruction to fetch remote resources.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\nADD ./app /app\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\nCOPY ./app /app\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> {rule:docker:S7026} - Use ADD instruction to retrieve remote resources </li>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#add-or-copy\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjr6HQpp6XieWuJ-->Replace this ADD instruction with a COPY instruction. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjr6HQpp6XieWuJ&open=AZEyVgjr6HQpp6XieWuJ\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.www","start_line":33,"end_line":33,"start_column":1,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/129/instances"},{"number":128,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/128","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/128","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7029","severity":"warning","description":"Prefer COPY over ADD for copying local resources","name":"docker:S7029","tags":[],"full_description":"Prefer COPY over ADD for copying local resources","help":"<p>In Dockerfiles, it is recommended to use the COPY instruction over the ADD instruction for copying local resources. The COPY instruction is more\nstraightforward and less prone to errors, making it a better choice for copying local files and directories into a Docker image.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the ADD instruction instead of COPY for local resources in Dockerfiles can lead to several issues, including unexpected behavior, increased\ncomplexity, and security risks. The ADD instruction has additional features that can introduce unintended side effects, such as automatically\nextracting compressed files and fetching remote resources. This can make the behavior of the instruction less predictable and harder to understand or\neven lead to security issues, if, for example, due to a typo in the source path, the ADD instruction could fetch a remote resource instead of copying\na local file.</p>\n<p>If you only need to copy local files or directories into your Docker image, it is recommended to use the COPY instruction instead. Only use the ADD\ninstruction when you need its additional features, such as fetching remote resources or extracting compressed files. See also the rule\n{rule:docker:S7026} for more information on using the ADD instruction to fetch remote resources.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\nADD ./app /app\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\nCOPY ./app /app\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> {rule:docker:S7026} - Use ADD instruction to retrieve remote resources </li>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#add-or-copy\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjr6HQpp6XieWuI-->Replace this ADD instruction with a COPY instruction. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjr6HQpp6XieWuI&open=AZEyVgjr6HQpp6XieWuI\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.www","start_line":32,"end_line":32,"start_column":1,"end_column":69},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/128/instances"},{"number":127,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/127","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/127","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7029","severity":"warning","description":"Prefer COPY over ADD for copying local resources","name":"docker:S7029","tags":[],"full_description":"Prefer COPY over ADD for copying local resources","help":"<p>In Dockerfiles, it is recommended to use the COPY instruction over the ADD instruction for copying local resources. The COPY instruction is more\nstraightforward and less prone to errors, making it a better choice for copying local files and directories into a Docker image.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the ADD instruction instead of COPY for local resources in Dockerfiles can lead to several issues, including unexpected behavior, increased\ncomplexity, and security risks. The ADD instruction has additional features that can introduce unintended side effects, such as automatically\nextracting compressed files and fetching remote resources. This can make the behavior of the instruction less predictable and harder to understand or\neven lead to security issues, if, for example, due to a typo in the source path, the ADD instruction could fetch a remote resource instead of copying\na local file.</p>\n<p>If you only need to copy local files or directories into your Docker image, it is recommended to use the COPY instruction instead. Only use the ADD\ninstruction when you need its additional features, such as fetching remote resources or extracting compressed files. See also the rule\n{rule:docker:S7026} for more information on using the ADD instruction to fetch remote resources.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\nADD ./app /app\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\nCOPY ./app /app\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> {rule:docker:S7026} - Use ADD instruction to retrieve remote resources </li>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#add-or-copy\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjr6HQpp6XieWuH-->Replace this ADD instruction with a COPY instruction. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjr6HQpp6XieWuH&open=AZEyVgjr6HQpp6XieWuH\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.www","start_line":31,"end_line":31,"start_column":1,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/127/instances"},{"number":126,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/126","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/126","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7029","severity":"warning","description":"Prefer COPY over ADD for copying local resources","name":"docker:S7029","tags":[],"full_description":"Prefer COPY over ADD for copying local resources","help":"<p>In Dockerfiles, it is recommended to use the COPY instruction over the ADD instruction for copying local resources. The COPY instruction is more\nstraightforward and less prone to errors, making it a better choice for copying local files and directories into a Docker image.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the ADD instruction instead of COPY for local resources in Dockerfiles can lead to several issues, including unexpected behavior, increased\ncomplexity, and security risks. The ADD instruction has additional features that can introduce unintended side effects, such as automatically\nextracting compressed files and fetching remote resources. This can make the behavior of the instruction less predictable and harder to understand or\neven lead to security issues, if, for example, due to a typo in the source path, the ADD instruction could fetch a remote resource instead of copying\na local file.</p>\n<p>If you only need to copy local files or directories into your Docker image, it is recommended to use the COPY instruction instead. Only use the ADD\ninstruction when you need its additional features, such as fetching remote resources or extracting compressed files. See also the rule\n{rule:docker:S7026} for more information on using the ADD instruction to fetch remote resources.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\nADD ./app /app\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\nCOPY ./app /app\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> {rule:docker:S7026} - Use ADD instruction to retrieve remote resources </li>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#add-or-copy\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjB6HQpp6XieWuA-->Replace this ADD instruction with a COPY instruction. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjB6HQpp6XieWuA&open=AZEyVgjB6HQpp6XieWuA\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.webapp","start_line":33,"end_line":33,"start_column":1,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/126/instances"},{"number":125,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/125","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/125","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7029","severity":"warning","description":"Prefer COPY over ADD for copying local resources","name":"docker:S7029","tags":[],"full_description":"Prefer COPY over ADD for copying local resources","help":"<p>In Dockerfiles, it is recommended to use the COPY instruction over the ADD instruction for copying local resources. The COPY instruction is more\nstraightforward and less prone to errors, making it a better choice for copying local files and directories into a Docker image.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the ADD instruction instead of COPY for local resources in Dockerfiles can lead to several issues, including unexpected behavior, increased\ncomplexity, and security risks. The ADD instruction has additional features that can introduce unintended side effects, such as automatically\nextracting compressed files and fetching remote resources. This can make the behavior of the instruction less predictable and harder to understand or\neven lead to security issues, if, for example, due to a typo in the source path, the ADD instruction could fetch a remote resource instead of copying\na local file.</p>\n<p>If you only need to copy local files or directories into your Docker image, it is recommended to use the COPY instruction instead. Only use the ADD\ninstruction when you need its additional features, such as fetching remote resources or extracting compressed files. See also the rule\n{rule:docker:S7026} for more information on using the ADD instruction to fetch remote resources.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\nADD ./app /app\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\nCOPY ./app /app\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> {rule:docker:S7026} - Use ADD instruction to retrieve remote resources </li>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#add-or-copy\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjB6HQpp6XieWt--->Replace this ADD instruction with a COPY instruction. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjB6HQpp6XieWt-&open=AZEyVgjB6HQpp6XieWt-\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.webapp","start_line":31,"end_line":31,"start_column":1,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/125/instances"},{"number":124,"created_at":"2024-08-08T14:36:38Z","updated_at":"2024-08-08T14:36:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/124","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/124","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7029","severity":"warning","description":"Prefer COPY over ADD for copying local resources","name":"docker:S7029","tags":[],"full_description":"Prefer COPY over ADD for copying local resources","help":"<p>In Dockerfiles, it is recommended to use the COPY instruction over the ADD instruction for copying local resources. The COPY instruction is more\nstraightforward and less prone to errors, making it a better choice for copying local files and directories into a Docker image.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the ADD instruction instead of COPY for local resources in Dockerfiles can lead to several issues, including unexpected behavior, increased\ncomplexity, and security risks. The ADD instruction has additional features that can introduce unintended side effects, such as automatically\nextracting compressed files and fetching remote resources. This can make the behavior of the instruction less predictable and harder to understand or\neven lead to security issues, if, for example, due to a typo in the source path, the ADD instruction could fetch a remote resource instead of copying\na local file.</p>\n<p>If you only need to copy local files or directories into your Docker image, it is recommended to use the COPY instruction instead. Only use the ADD\ninstruction when you need its additional features, such as fetching remote resources or extracting compressed files. See also the rule\n{rule:docker:S7026} for more information on using the ADD instruction to fetch remote resources.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\nADD ./app /app\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\nCOPY ./app /app\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> {rule:docker:S7026} - Use ADD instruction to retrieve remote resources </li>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#add-or-copy\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"<!--SONAR_ISSUE_KEY:AZEyVgjB6HQpp6XieWt_-->Replace this ADD instruction with a COPY instruction. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_resorption-bidonvilles&issues=AZEyVgjB6HQpp6XieWt_&open=AZEyVgjB6HQpp6XieWt_\">SonarCloud</a></p>"},"location":{"path":"Dockerfile.webapp","start_line":32,"end_line":32,"start_column":1,"end_column":69},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/124/instances"},{"number":123,"created_at":"2024-06-05T14:23:17Z","updated_at":"2024-06-05T14:44:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/123","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/123","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.18.3"},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"packages/api/test/utils/shantytown.ts","start_line":12,"end_line":12,"start_column":20,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/123/instances"},{"number":122,"created_at":"2024-06-05T14:23:17Z","updated_at":"2024-06-05T14:44:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/122","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/122","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.18.3"},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"packages/api/test/utils/shantytown.ts","start_line":11,"end_line":11,"start_column":19,"end_column":44},"classifications":["test"]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/122/instances"},{"number":121,"created_at":"2024-06-05T14:23:17Z","updated_at":"2024-06-05T14:44:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/121","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/121","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.18.3"},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"packages/api/server/services/shantytown/create.spec.ts","start_line":31,"end_line":31,"start_column":24,"end_column":49},"classifications":["test"]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/121/instances"},{"number":120,"created_at":"2024-06-05T14:23:17Z","updated_at":"2024-06-05T14:44:39Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/120","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/120","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.18.3"},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"packages/api/server/services/shantytown/create.spec.ts","start_line":30,"end_line":30,"start_column":23,"end_column":48},"classifications":["test"]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/120/instances"},{"number":115,"created_at":"2023-10-18T10:12:48Z","updated_at":"2023-10-18T18:31:04Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/115","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/115","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.18.3"},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"packages/api/server/utils/mattermost.ts","start_line":89,"end_line":89,"start_column":22,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/115/instances"},{"number":114,"created_at":"2023-10-18T10:12:48Z","updated_at":"2023-10-18T18:31:04Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/114","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/114","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.18.3"},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"packages/api/server/models/shantytownModel/_common/query.ts","start_line":99,"end_line":99,"start_column":56,"end_column":63},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/114/instances"},{"number":113,"created_at":"2023-10-18T10:12:48Z","updated_at":"2023-10-18T18:31:04Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/113","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/113","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.18.3"},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"packages/api/server/models/shantytownModel/_common/getComments.ts","start_line":97,"end_line":97,"start_column":25,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/113/instances"},{"number":112,"created_at":"2023-07-27T14:44:12Z","updated_at":"2024-02-05T16:43:26Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/112","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/112","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/client-side-unvalidated-url-redirection","severity":"error","description":"Client-side URL redirect","name":"js/client-side-unvalidated-url-redirection","tags":["external/cwe/cwe-079","external/cwe/cwe-116","external/cwe/cwe-601","security"],"full_description":"Client-side URL redirection based on unvalidated user input may cause redirection to malicious web sites.","help":"# Client-side URL redirect\nRedirecting to a URL that is constructed from parts of the DOM that may be controlled by an attacker can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.\n\n\n## Recommendation\nTo guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.\n\n\n## Example\nThe following example uses a regular expression to extract a query parameter from the document URL, and then uses it to construct a new URL to redirect to without any further validation. This may allow an attacker to craft a link that redirects from a trusted website to some arbitrary website of their choosing, which facilitates phishing attacks:\n\n\n```javascript\nwindow.location = /.*redirect=([^&]*).*/.exec(document.location.href)[1];\n\n```\n\n## References\n* OWASP: [ XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.18.3"},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"Untrusted URL redirection depends on a user-provided value.\nUntrusted URL redirection depends on a user-provided value."},"location":{"path":"packages/frontend/www/public/piwik.js","start_line":43,"end_line":43,"start_column":154,"end_column":173},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/112/instances"},{"number":56,"created_at":"2022-04-17T03:12:02Z","updated_at":"2023-07-16T03:18:52Z","url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/56","html_url":"https://github.com/MTES-MCT/resorption-bidonvilles/security/code-scanning/56","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/client-side-unvalidated-url-redirection","severity":"error","description":"Client-side URL redirect","name":"js/client-side-unvalidated-url-redirection","tags":["external/cwe/cwe-079","external/cwe/cwe-116","external/cwe/cwe-601","security"],"full_description":"Client-side URL redirection based on unvalidated user input may cause redirection to malicious web sites.","help":"# Client-side URL redirect\nRedirecting to a URL that is constructed from parts of the DOM that may be controlled by an attacker can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.\n\n\n## Recommendation\nTo guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.\n\n\n## Example\nThe following example uses a regular expression to extract a query parameter from the document URL, and then uses it to construct a new URL to redirect to without any further validation. This may allow an attacker to craft a link that redirects from a trusted website to some arbitrary website of their choosing, which facilitates phishing attacks:\n\n\n```javascript\nwindow.location = /.*redirect=([^&]*).*/.exec(document.location.href)[1];\n\n```\n\n## References\n* OWASP: [ XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.18.3"},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript","state":"open","commit_sha":"8353d0ec587ccc687a6d9e21e857a3743ec10bf1","message":{"text":"Untrusted URL redirection depends on a user-provided value.\nUntrusted URL redirection depends on a user-provided value."},"location":{"path":"packages/frontend/www/public/matomo.js","start_line":34,"end_line":34,"start_column":367,"end_column":386},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/resorption-bidonvilles/code-scanning/alerts/56/instances"}]}]}