{"totalCount":3,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/carbure","grade":"D","alerts":[{"number":63,"created_at":"2024-08-22T14:43:04Z","updated_at":"2024-08-22T14:43:06Z","url":"https://api.github.com/repos/MTES-MCT/carbure/code-scanning/alerts/63","html_url":"https://github.com/MTES-MCT/carbure/security/code-scanning/63","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7018","severity":"warning","description":"Arguments in long RUN instructions should be sorted","name":"docker:S7018","tags":[],"full_description":"Arguments in long RUN instructions should be sorted","help":"<p>In Dockerfiles, when commands within a <code>RUN</code> instruction have a lot of arguments, especially those that install system packages, it is\nimportant to ensure that the arguments are sorted alphabetically (if the order is not enforced by a command). This practice enhances the readability\nand maintainability of the code. It allows for easier tracking of modifications and can help prevent potential errors.</p>\n<h2>Why is this an issue?</h2>\n<p>When arguments in <code>RUN</code> instructions are not sorted alphabetically, it can make the Dockerfile harder to read and maintain. However,\nwhen arguments are sorted, it is easier to track changes in version control systems and to locate specific arguments. This applies first and foremost\nto package managers, where a list of installed packages can grow over time.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    unzip \\\n    wget \\\n    curl \\\n    git \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nFROM alpine:3.12\n\nRUN apk add unzip wget curl git zip\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    git \\\n    unzip \\\n    wget \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nFROM alpine:3.12\n\nRUN apk add curl git unzip wget zip\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#sort-multi-line-arguments\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"075daf524d462d4d2f38099b01f766f247bd9a82","message":{"text":"<!--SONAR_ISSUE_KEY:AZExfABSb2SKGC4Z-ohx-->Sort these package names alphanumerically. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_carbure&issues=AZExfABSb2SKGC4Z-ohx&open=AZExfABSb2SKGC4Z-ohx\">SonarCloud</a></p>"},"location":{"path":"ci/Dockerfile","start_line":7,"end_line":17,"start_column":26,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/carbure/code-scanning/alerts/63/instances"},{"number":62,"created_at":"2024-08-22T14:43:04Z","updated_at":"2024-08-22T14:43:06Z","url":"https://api.github.com/repos/MTES-MCT/carbure/code-scanning/alerts/62","html_url":"https://github.com/MTES-MCT/carbure/security/code-scanning/62","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S7018","severity":"warning","description":"Arguments in long RUN instructions should be sorted","name":"docker:S7018","tags":[],"full_description":"Arguments in long RUN instructions should be sorted","help":"<p>In Dockerfiles, when commands within a <code>RUN</code> instruction have a lot of arguments, especially those that install system packages, it is\nimportant to ensure that the arguments are sorted alphabetically (if the order is not enforced by a command). This practice enhances the readability\nand maintainability of the code. It allows for easier tracking of modifications and can help prevent potential errors.</p>\n<h2>Why is this an issue?</h2>\n<p>When arguments in <code>RUN</code> instructions are not sorted alphabetically, it can make the Dockerfile harder to read and maintain. However,\nwhen arguments are sorted, it is easier to track changes in version control systems and to locate specific arguments. This applies first and foremost\nto package managers, where a list of installed packages can grow over time.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    unzip \\\n    wget \\\n    curl \\\n    git \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nFROM alpine:3.12\n\nRUN apk add unzip wget curl git zip\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM ubuntu:20.04\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    git \\\n    unzip \\\n    wget \\\n    zip\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nFROM alpine:3.12\n\nRUN apk add curl git unzip wget zip\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Docker Docs - <a href=\"https://docs.docker.com/build/building/best-practices/#sort-multi-line-arguments\">Building best practices</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"075daf524d462d4d2f38099b01f766f247bd9a82","message":{"text":"<!--SONAR_ISSUE_KEY:AZExe_60b2SKGC4Z-ohu-->Sort these package names alphanumerically. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_carbure&issues=AZExe_60b2SKGC4Z-ohu&open=AZExe_60b2SKGC4Z-ohu\">SonarCloud</a></p>"},"location":{"path":"web/Dockerfile","start_line":9,"end_line":18,"start_column":26,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/carbure/code-scanning/alerts/62/instances"},{"number":61,"created_at":"2024-05-16T09:12:41Z","updated_at":"2024-05-16T09:12:43Z","url":"https://api.github.com/repos/MTES-MCT/carbure/code-scanning/alerts/61","html_url":"https://github.com/MTES-MCT/carbure/security/code-scanning/61","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"pythonsecurity:S5145","severity":"warning","description":"Logging should not be vulnerable to injection attacks","name":"pythonsecurity:S5145","tags":["cwe"],"full_description":"Logging should not be vulnerable to injection attacks","help":"<h2>Why is this an issue?</h2>\n<p>Log injection occurs when an application fails to sanitize untrusted data used for logging.</p>\n<p>An attacker can forge log content to prevent an organization from being able to trace back malicious activities.</p>\n<h3>What is the potential impact?</h3>\n<p>If an attacker can insert arbitrary data into a log file, the integrity of the chain of events being recorded can be compromised.<br> This\nfrequently occurs because attackers can inject the log entry separator of the logger framework, commonly newlines, and thus insert artificial log\nentries. <br> Other attacks could also occur requiring only field pollution, such as cross-site scripting (XSS) or code injection (for example,\nLog4Shell) if the logged data is fed to other application components, which may interpret the injected data differently.<br></p>\n<p>The focus of this rule is newline character replacement.</p>\n<h4>Log Forge</h4>\n<p>An attacker, able to create independent log entries by injecting log entry separators, inserts bogus data into a log file to conceal his malicious\nactivities. This obscures the content for an incident response team to trace the origin of the breach as the indicators of compromise (IoCs) lead to\nfake application events.</p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to log injection as it constructs log entries using untrusted data. An attacker can leverage this to manipulate\nthe chain of events being recorded.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport logging\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    app.logger.critical(\"%s\", data) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport logging\nimport base64\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    if data.isalnum():\n        app.logger.critical(\"%s\", data)\n    else:\n        app.logger.critical(\"Invalid Input: %s\", base64.b64encode(data.encode('UTF-8')))\n</pre>\n<h3>How does this work?</h3>\n<p>Data used for logging should be content-restricted and typed. This can be done by validating the data content or sanitizing it.<br> Validation and\nsanitization mainly revolve around preventing carriage return (CR) and line feed (LF) characters. However, further actions could be required based on\nthe application context and the logged data usage.</p>\n<p>Here, the example compliant code uses the <code>isalnum</code> function to ensure the untrusted data is safe. If not, it performs Base64 encoding\nto protect from log injection.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/117\">CWE-117 - Improper Output Neutralization for Logs</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"075daf524d462d4d2f38099b01f766f247bd9a82","message":{"text":"<!--SONAR_ISSUE_KEY:AY9ypfrydaRQKkuaFCIe-->Change this code to not log user-controlled data. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_carbure&issues=AY9ypfrydaRQKkuaFCIe&open=AY9ypfrydaRQKkuaFCIe\">SonarCloud</a></p>"},"location":{"path":"web/carbure/middlewares/logging.py","start_line":208,"end_line":208,"start_column":13,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/carbure/code-scanning/alerts/61/instances"}]}]}