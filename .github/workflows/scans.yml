name: DashLord scans

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      url:
        description: "Single url with repositories to scan e.g. url\\;repo1,repo2 or empty to scan all urls"
        required: false
        default: ""
  push:
    paths:
      - 'dashlord.yaml'
      - 'dashlord.yml'
      - 'urls.txt'

jobs:
  init:
    runs-on: ubuntu-latest
    name: Prepare
    outputs:
      urls: ${{ steps.init.outputs.urls }}
      urls_json: ${{ steps.init.outputs.urls_json }}
    steps:
      - uses: actions/checkout@v2
      - id: init
        uses: "SocialGouv/dashlord-actions/init@main"

  scans:
    runs-on: ubuntu-latest
    name: Scan
    needs: init
    continue-on-error: true
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        urls: ${{ fromJson(needs.init.outputs.urls_json) }}
    steps:
      - uses: actions/checkout@v2

      - run: |
          mkdir scans

      - run: |
          echo url: ${{ matrix.urls.url }}
          echo repositories: ${{ join(matrix.urls.repositories) }}

      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Wappalyzer scan
        uses: "socialgouv/wappalyzer-action@master"
        id: wappalyzer 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.wappalyzer.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.wappalyzer.id)) }}
        continue-on-error: true
        with:
          url: "${{ matrix.urls.url }}"
          output: scans/wappalyzer.json

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.4.0
        id: zaproxy 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.zaproxy.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.zaproxy.id)) }}
        continue-on-error: true
        with:
          token: "" # disable issue creation
          docker_name: "owasp/zap2docker-stable"
          target: "${{ matrix.urls.url }}"
          cmd_options: "-a"

      - name: Lighthouse scan
        continue-on-error: true
        uses: treosh/lighthouse-ci-action@v7
        id: lighthouse 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.lighthouse.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.lighthouse.id)) }}
        with:
          urls: "${{ matrix.urls.url }}"
          uploadArtifacts: false
          temporaryPublicStorage: false
          configPath: "./lighthouserc.json"

      - name: Mozilla HTTP Observatory
        continue-on-error: true
        uses: SocialGouv/httpobs-action@master
        id: httpobs 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.httpobs.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.httpobs.id)) }}
        with:
          url: "${{ matrix.urls.url }}"
          output: "scans/http.json"

      - name: Third-party scripts scan
        continue-on-error: true
        uses: SocialGouv/thirdparties-action@master
        id: thirdparties 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.thirdparties.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.thirdparties.id)) }}
        with:
          url: "${{ matrix.urls.url }}"
          output: "scans/thirdparties.json"

      # testssl.sh action needs an hostname to save its output so we build it here
      - name: Extract hostname
        id: hostname
        run: |
          HOSTNAME=$(echo "${{ matrix.urls.url }}" | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/')
          echo "::set-output name=value::$HOSTNAME"

      - name: testssl.sh scan
        continue-on-error: true
        uses: "mbogh/test-ssl-action@v1.1"
        id: testssl 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.testssl.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.testssl.id)) }}
        with:
          host: ${{ steps.hostname.outputs.value }}
          output: scans
          grade: "F"
          options: "--fast"

      - name: nmap vulnerabilities scan
        continue-on-error: true
        uses: "MTES-MCT/nmap-action@main"
        id: nmap 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.nmap.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.nmap.id)) }}
        with:
          host: ${{ steps.hostname.outputs.value }}
          outputDir: 'scans'
          outputFile: 'nmapvuln.json'
          withVulnerabilities: true
          raw: false
          
      - name: Nuclei scan
        continue-on-error: true
        uses: "SocialGouv/dashlord-nuclei-action@master"
        id: nuclei 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.nuclei.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.nuclei.id)) }}
        with:
          url: ${{ matrix.urls.url }}
          output: "scans/nuclei.log"

      - name: Updown.io checks
        continue-on-error: true
        uses: "MTES-MCT/updownio-action@main"
        id: updownio 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.updownio.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.updownio.id)) }}
        with:
          apiKey: ${{ secrets.UPDOWNIO_API_KEY }}
          url: ${{ matrix.urls.url }}
          output: scans/updownio.json

      - name: Dependabot vulnerabilities alerts
        continue-on-error: true
        uses: "MTES-MCT/dependabotalerts-action@main"
        id: dependabot 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.dependabot.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.dependabot.id)) }}
        with:
          token: ${{ secrets.DEPENDABOTALERTS_TOKEN }}
          repositories: ${{ join(matrix.urls.repositories) }}
          maxAlerts: 20
          output: scans/dependabotalerts.json

      - name: Code quality alerts
        continue-on-error: true
        uses: "MTES-MCT/codescanalerts-action@main"
        id: codescan 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.codescan.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.codescan.id)) }}
        with:
          token: ${{ secrets.CODESCANALERTS_TOKEN }}
          repositories: ${{ join(matrix.urls.repositories) }}
          output: scans/codescanalerts.json
          
      - name: Screenshot Website
        uses: swinton/screenshot-website@v1.x
        id: screenshot 
        if: ${{ (matrix.urls.tools.disabled != NaN && !contains(matrix.urls.tools.disabled, steps.screenshot.id)) || (matrix.urls.tools.enabled != NaN && contains(matrix.urls.tools.enabled, steps.screenshot.id)) }}
        timeout-minutes: 1
        with:
          source: "${{ matrix.urls.url }}"
          type: jpeg
          destination: screenshot.jpeg
          width: 1280

      - uses: SocialGouv/dashlord-actions/save@main
        with:
          url: ${{ matrix.urls.url }}

      - uses: EndBug/add-and-commit@v7
        with:
          add: '["results"]'
          author_name: ${{ secrets.SOCIALGROOVYBOT_NAME }}
          author_email: ${{ secrets.SOCIALGROOVYBOT_EMAIL }}
          message: "update: ${{ matrix.urls.url }}"
